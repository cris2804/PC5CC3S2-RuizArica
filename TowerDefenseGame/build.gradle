plugins {
    id 'java'
    // https://gradle-pitest-plugin.solidsoft.info/
//    id 'info.solidsoft.pitest' version '1.15.0'
    // https://docs.gradle.org/current/userguide/jacoco_plugin.html
    id 'jacoco' // Plugin de JaCoCo
    id 'info.solidsoft.pitest' version '1.15.0'
}

group = 'com.jhaner'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.assertj:assertj-core:3.25.3'
    testImplementation 'org.jetbrains:annotations:24.0.0'
    implementation group: 'org.mockito', name: 'mockito-core', version: '5.12.0'
    pitest 'org.pitest:pitest-junit5-plugin:1.1.0'
//    pitest 'org.example.pit.plugins:pitest-custom-plugin:0.42'

// Agrega el plugin de PIT para JUnit 5
//    pitest 'org.pitest:pitest-junit5-plugin:1.1.0'
}

test {
    useJUnitPlatform()
}
pitest {
    targetClasses = ['org.example.*'] // Paquete de clases a mutar
    mutators = ['DEFAULTS'] // Conjunto de mutadores [OLD_DEFAULTS, DEFAULTS, STRONGER, ALL]
    outputFormats = ['HTML'] // Formato de salida del informe
    timestampedReports = false // Deshabilitar informes con marca de tiempo para facilitar la navegación
    verbose = true
}
// pitest
//pitest {
//    targetClasses = ['com.jhaner.*'] // Paquete de clases a mutar
//    mutators = ['DEFAULTS'] // Conjunto de mutadores por defecto
//    outputFormats = ['HTML'] // Formato de salida del informe
//    timestampedReports = false // Deshabilitar informes con marca de tiempo para facilitar la navegación
//}

// jacoco
jacoco {
    toolVersion = "0.8.12" // Versión de JaCoCo (compatible con java 21)
}

jacocoTestReport {
    dependsOn test // Ejecuta las pruebas antes de generar el informe

    reports {
        xml.required.set(true)
        html.required.set(true)
    }
}
//pitest {
//    junit5PluginVersion = '1.0.0'
//}

/*
// Configuración de cobertura mínima requerida si no se cumple, el build fallará
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.8 // 80% de cobertura mínima requerida
            }
        }
    }
}
*/

check.dependsOn jacocoTestCoverageVerification

// ./gradlew pitest
// ./gradlew jacocoTestReport

